// LeetCode-2610: https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions
// about 2/3rds of the code was generated by Amazon CodeWhisperer

#include <vector>
#include <unordered_map>
#include <map>
#include <list>

using namespace std;

class Solution {
private:
    unordered_map<int, int> createFreqMap(vector <int>& vec) {
        unordered_map<int, int> freqMap;

        for (int i = 0; i < vec.size(); i++) {
            freqMap[vec[i]]++;
        }

        return freqMap;
    }

    map <int, list <int> > convertToInverseFreqMap(unordered_map<int, int>& freqMap) {
        map <int, list <int> > inverseFreqMap;

        for (auto it = freqMap.begin(); it != freqMap.end(); it++) {
            int val = it->first;
            int freq = it->second;

            inverseFreqMap[freq].push_back(val);
        }

        return inverseFreqMap;
    }

    vector <vector <int> > createEmpty2DArray(int numRows) {
        vector <vector <int> > emptyMat;

        for (int i = 0; i < numRows; i++) {
            vector <int> row;
            emptyMat.push_back(row);
        }

        return emptyMat;
    }

    vector<vector<int>> convertTo2DArray(map <int, list <int> >& inverseFreqMap) {
        int numRows = inverseFreqMap.rbegin()->first;
        vector<vector<int>> result = createEmpty2DArray(numRows);

        // iterate from highest frequency to lowest frequency
        for (auto it = inverseFreqMap.rbegin(); it != inverseFreqMap.rend(); it++) {
            int freq = it->first;
            list <int> vals = it->second;

            // fill up all elements of each frequency in as many rows (from top) as the frequency
            for (auto it2 = vals.begin(); it2 != vals.end(); it2++) {
                int val = *it2;

                for (int i = 0; i < freq; i++) {
                    result[i].push_back(val);
                }
            }
        }

        return result;
    }

public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        if (nums.size() == 1) {
            // only one element
            return {{nums[0]}};
        }

        unordered_map<int, int> freqMap = createFreqMap(nums);
        if (freqMap.size() == 1) {
            // only one element repeated n times
            vector <vector <int> > result(nums.size(), {nums[0]});
            return result;
        }

        map <int, list <int> > inverseFreqMap = convertToInverseFreqMap(freqMap);
        return convertTo2DArray(inverseFreqMap);
    }
};
