// LeetCode-643: https://leetcode.com/problems/maximum-average-subarray-i
// straightforward do-as-directed question; dont bother looking

#include <vector>
#include <cassert>
#include <numeric>

using namespace std;

class Solution {
private:
    // generated by Amazon Q
    long long sumFirstK(const std::vector<int>& vec, int k) {
        return accumulate(vec.begin(), vec.begin() + min(k, static_cast<int>(vec.size())), 0LL);
    }

public:
    double findMaxAverage(vector<int>& nums, int k) {
        if (k == 1) {
            return (double) *max_element(nums.begin(), nums.end());
        }

        long long crrSum = sumFirstK(nums, k);
        long long maxSum = crrSum;
//        printf("\n[findMaxAverage] At nums[i=%d]=%d, crrSum = %lld, maxSum = %lld\n", 0, nums[0], crrSum, maxSum);

        for (int i = 1; (i + k - 1) < nums.size(); i++) {
            crrSum -= nums[i - 1];
            crrSum += nums[i + k - 1];

//            printf("[findMaxAverage] At nums[i=%d]=%d, crrSum = %lld, maxSum = %lld\n", i, nums[i], crrSum, maxSum);
            maxSum = max(maxSum, crrSum);
        }

//        printf("[findMaxAverage] For nums, maxSum = %lld, maxAvg=%f\n", maxSum, (((double) maxSum) / k));

        return ((double) maxSum) / k;
    }
};

class SolutionTest {
public:
    void testFindMaxAverage() {
        Solution soln = Solution();

        vector<int> nums;
        int k;
        double outExpected, outComputed;

        nums = {1, 12, -5, -6, 50, 3};
        k = 4;
        outExpected = 12.75;
        outComputed = soln.findMaxAverage(nums, k);
//        printf("[testFindMaxAverage] outExpected = %f, outComputed = %f\n", outExpected, outComputed);
        assert(outExpected == outComputed);

        nums = {5};
        k = 1;
        outExpected = 5;
        outComputed = soln.findMaxAverage(nums, k);
        assert(outExpected == outComputed);

        printf("[testFindMaxAverage] All test-cases passed!\n");
    }
};

int main() {
    SolutionTest solnTest = SolutionTest();

    solnTest.testFindMaxAverage();

    return 0;
}
